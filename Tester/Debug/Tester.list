
Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a04  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b90  08003b90  00013b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd8  08003bd8  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be0  08003be0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007199  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016d0  00000000  00000000  000271cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  000288a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  000290c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bbd1  00000000  00000000  00029818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000066ee  00000000  00000000  000453e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a484  00000000  00000000  0004bad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e5f5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002250  00000000  00000000  000e5fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b74 	.word	0x08003b74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08003b74 	.word	0x08003b74

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4013      	ands	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40023800 	.word	0x40023800

08000dfc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000e06:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <LL_SYSCFG_SetEXTISource+0x58>)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	0c1b      	lsrs	r3, r3, #16
 8000e16:	43db      	mvns	r3, r3
 8000e18:	ea02 0103 	and.w	r1, r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	fa93 f3a3 	rbit	r3, r3
 8000e28:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	fab3 f383 	clz	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	fa03 f202 	lsl.w	r2, r3, r2
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <LL_SYSCFG_SetEXTISource+0x58>)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	430a      	orrs	r2, r1
 8000e42:	3302      	adds	r3, #2
 8000e44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40013800 	.word	0x40013800

08000e58 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	613b      	str	r3, [r7, #16]
  return result;
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	fab3 f383 	clz	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2103      	movs	r1, #3
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	401a      	ands	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	fa93 f3a3 	rbit	r3, r3
 8000e92:	61bb      	str	r3, [r7, #24]
  return result;
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fab3 f383 	clz	r3, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b089      	sub	sp, #36	; 0x24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	613b      	str	r3, [r7, #16]
  return result;
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2103      	movs	r1, #3
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	61bb      	str	r3, [r7, #24]
  return result;
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	431a      	orrs	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	60da      	str	r2, [r3, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3724      	adds	r7, #36	; 0x24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	619a      	str	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	041a      	lsls	r2, r3, #16
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000f70:	2010      	movs	r0, #16
 8000f72:	f7ff ff2b 	bl	8000dcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f76:	2004      	movs	r0, #4
 8000f78:	f7ff ff28 	bl	8000dcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000f7c:	2080      	movs	r0, #128	; 0x80
 8000f7e:	f7ff ff25 	bl	8000dcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff ff22 	bl	8000dcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f7ff ff1f 	bl	8000dcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000f8e:	2008      	movs	r0, #8
 8000f90:	f7ff ff1c 	bl	8000dcc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, CS_I2C_SPI_Pin|LL_GPIO_PIN_9);
 8000f94:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000f98:	488c      	ldr	r0, [pc, #560]	; (80011cc <MX_GPIO_Init+0x27c>)
 8000f9a:	f7ff ffc9 	bl	8000f30 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	488b      	ldr	r0, [pc, #556]	; (80011d0 <MX_GPIO_Init+0x280>)
 8000fa2:	f7ff ffc5 	bl	8000f30 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fa6:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000faa:	488a      	ldr	r0, [pc, #552]	; (80011d4 <MX_GPIO_Init+0x284>)
 8000fac:	f7ff ffc0 	bl	8000f30 <LL_GPIO_ResetOutputPin>
                          |Audio_RST_Pin);

  /**/
  LL_GPIO_SetOutputPin(GPIOC, OTG_FS_PowerSwitchOn_Pin|LL_GPIO_PIN_1);
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	4887      	ldr	r0, [pc, #540]	; (80011d0 <MX_GPIO_Init+0x280>)
 8000fb4:	f7ff ffae 	bl	8000f14 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	487e      	ldr	r0, [pc, #504]	; (80011cc <MX_GPIO_Init+0x27c>)
 8000fd2:	f001 fd31 	bl	8002a38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4878      	ldr	r0, [pc, #480]	; (80011d0 <MX_GPIO_Init+0x280>)
 8000ff0:	f001 fd22 	bl	8002a38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001004:	2302      	movs	r3, #2
 8001006:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4870      	ldr	r0, [pc, #448]	; (80011d0 <MX_GPIO_Init+0x280>)
 800100e:	f001 fd13 	bl	8002a38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001012:	2304      	movs	r3, #4
 8001014:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001016:	2301      	movs	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001022:	2302      	movs	r3, #2
 8001024:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4869      	ldr	r0, [pc, #420]	; (80011d0 <MX_GPIO_Init+0x280>)
 800102c:	f001 fd04 	bl	8002a38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001030:	2304      	movs	r3, #4
 8001032:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4865      	ldr	r0, [pc, #404]	; (80011d8 <MX_GPIO_Init+0x288>)
 8001042:	f001 fcf9 	bl	8002a38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800104c:	2301      	movs	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001058:	2302      	movs	r3, #2
 800105a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	485a      	ldr	r0, [pc, #360]	; (80011cc <MX_GPIO_Init+0x27c>)
 8001062:	f001 fce9 	bl	8002a38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001066:	f24f 0310 	movw	r3, #61456	; 0xf010
 800106a:	603b      	str	r3, [r7, #0]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4854      	ldr	r0, [pc, #336]	; (80011d4 <MX_GPIO_Init+0x284>)
 8001082:	f001 fcd9 	bl	8002a38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001086:	2320      	movs	r3, #32
 8001088:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	484f      	ldr	r0, [pc, #316]	; (80011d4 <MX_GPIO_Init+0x284>)
 8001098:	f001 fcce 	bl	8002a38 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 800109c:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff feab 	bl	8000dfc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE9);
 80010a6:	494d      	ldr	r1, [pc, #308]	; (80011dc <MX_GPIO_Init+0x28c>)
 80010a8:	2002      	movs	r0, #2
 80010aa:	f7ff fea7 	bl	8000dfc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE15);
 80010ae:	494c      	ldr	r1, [pc, #304]	; (80011e0 <MX_GPIO_Init+0x290>)
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fea3 	bl	8000dfc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 80010b6:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80010ba:	2004      	movs	r0, #4
 80010bc:	f7ff fe9e 	bl	8000dfc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 80010c8:	2301      	movs	r3, #1
 80010ca:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010cc:	2301      	movs	r3, #1
 80010ce:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fb29 	bl	800272c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 80010da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010de:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80010e8:	2302      	movs	r3, #2
 80010ea:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fb1b 	bl	800272c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80010f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010fa:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010fc:	2301      	movs	r3, #1
 80010fe:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001100:	2300      	movs	r3, #0
 8001102:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001104:	2302      	movs	r3, #2
 8001106:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fb0d 	bl	800272c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001116:	2301      	movs	r3, #1
 8001118:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 800111a:	2301      	movs	r3, #1
 800111c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800111e:	2301      	movs	r3, #1
 8001120:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fb00 	bl	800272c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800112c:	2200      	movs	r2, #0
 800112e:	2101      	movs	r1, #1
 8001130:	482c      	ldr	r0, [pc, #176]	; (80011e4 <MX_GPIO_Init+0x294>)
 8001132:	f7ff fec0 	bl	8000eb6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_9, LL_GPIO_PULL_UP);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	4824      	ldr	r0, [pc, #144]	; (80011d0 <MX_GPIO_Init+0x280>)
 800113e:	f7ff feba 	bl	8000eb6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_15, LL_GPIO_PULL_UP);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001148:	4826      	ldr	r0, [pc, #152]	; (80011e4 <MX_GPIO_Init+0x294>)
 800114a:	f7ff feb4 	bl	8000eb6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 800114e:	2200      	movs	r2, #0
 8001150:	2102      	movs	r1, #2
 8001152:	481e      	ldr	r0, [pc, #120]	; (80011cc <MX_GPIO_Init+0x27c>)
 8001154:	f7ff feaf 	bl	8000eb6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001158:	2200      	movs	r2, #0
 800115a:	2101      	movs	r1, #1
 800115c:	4821      	ldr	r0, [pc, #132]	; (80011e4 <MX_GPIO_Init+0x294>)
 800115e:	f7ff fe7b 	bl	8000e58 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_9, LL_GPIO_MODE_INPUT);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	4819      	ldr	r0, [pc, #100]	; (80011d0 <MX_GPIO_Init+0x280>)
 800116a:	f7ff fe75 	bl	8000e58 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_15, LL_GPIO_MODE_INPUT);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001174:	481b      	ldr	r0, [pc, #108]	; (80011e4 <MX_GPIO_Init+0x294>)
 8001176:	f7ff fe6f 	bl	8000e58 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 800117a:	2200      	movs	r2, #0
 800117c:	2102      	movs	r1, #2
 800117e:	4813      	ldr	r0, [pc, #76]	; (80011cc <MX_GPIO_Init+0x27c>)
 8001180:	f7ff fe6a 	bl	8000e58 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001184:	f7ff fd98 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8001188:	4603      	mov	r3, r0
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fde8 	bl	8000d64 <NVIC_EncodePriority>
 8001194:	4603      	mov	r3, r0
 8001196:	4619      	mov	r1, r3
 8001198:	2017      	movs	r0, #23
 800119a:	f7ff fdb9 	bl	8000d10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800119e:	2017      	movs	r0, #23
 80011a0:	f7ff fd98 	bl	8000cd4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011a4:	f7ff fd88 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fdd8 	bl	8000d64 <NVIC_EncodePriority>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4619      	mov	r1, r3
 80011b8:	2028      	movs	r0, #40	; 0x28
 80011ba:	f7ff fda9 	bl	8000d10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011be:	2028      	movs	r0, #40	; 0x28
 80011c0:	f7ff fd88 	bl	8000cd4 <__NVIC_EnableIRQ>

}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40020400 	.word	0x40020400
 80011dc:	00f00002 	.word	0x00f00002
 80011e0:	f0000003 	.word	0xf0000003
 80011e4:	40020000 	.word	0x40020000

080011e8 <__NVIC_SetPriorityGrouping>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <LL_RCC_HSE_Enable+0x1c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <LL_RCC_HSE_Enable+0x1c>)
 800123a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <LL_RCC_HSE_IsReady+0x24>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001260:	bf0c      	ite	eq
 8001262:	2301      	moveq	r3, #1
 8001264:	2300      	movne	r3, #0
 8001266:	b2db      	uxtb	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <LL_RCC_SetSysClkSource+0x24>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 0203 	bic.w	r2, r3, #3
 8001288:	4904      	ldr	r1, [pc, #16]	; (800129c <LL_RCC_SetSysClkSource+0x24>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4313      	orrs	r3, r2
 800128e:	608b      	str	r3, [r1, #8]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40023800 	.word	0x40023800

080012a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <LL_RCC_GetSysClkSource+0x18>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 030c 	and.w	r3, r3, #12
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012cc:	4904      	ldr	r1, [pc, #16]	; (80012e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40023800 	.word	0x40023800

080012e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012f4:	4904      	ldr	r1, [pc, #16]	; (8001308 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40023800 	.word	0x40023800

0800130c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800131c:	4904      	ldr	r1, [pc, #16]	; (8001330 <LL_RCC_SetAPB2Prescaler+0x24>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4313      	orrs	r3, r2
 8001322:	608b      	str	r3, [r1, #8]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40023800 	.word	0x40023800

08001334 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <LL_RCC_PLL_Enable+0x1c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <LL_RCC_PLL_Enable+0x1c>)
 800133e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <LL_RCC_PLL_IsReady+0x24>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001390:	4013      	ands	r3, r2
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4311      	orrs	r1, r2
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	0192      	lsls	r2, r2, #6
 800139c:	430a      	orrs	r2, r1
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013ac:	4904      	ldr	r1, [pc, #16]	; (80013c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40023800 	.word	0x40023800
 80013c4:	ffbf8000 	.word	0xffbf8000

080013c8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d4:	4907      	ldr	r1, [pc, #28]	; (80013f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4313      	orrs	r3, r2
 80013da:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40023800 	.word	0x40023800

080013f8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <LL_APB2_GRP1_EnableClock+0x2c>)
 800140e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4013      	ands	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40023800 	.word	0x40023800

08001428 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <LL_FLASH_SetLatency+0x24>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 0207 	bic.w	r2, r3, #7
 8001438:	4904      	ldr	r1, [pc, #16]	; (800144c <LL_FLASH_SetLatency+0x24>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40023c00 	.word	0x40023c00

08001450 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <LL_FLASH_GetLatency+0x18>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0307 	and.w	r3, r3, #7
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800147c:	4904      	ldr	r1, [pc, #16]	; (8001490 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40007000 	.word	0x40007000

08001494 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1a      	ldr	r2, [r3, #32]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	621a      	str	r2, [r3, #32]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_GPIO_SetOutputPin>:
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_GPIO_ResetOutputPin>:
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	041a      	lsls	r2, r3, #16
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	4013      	ands	r3, r2
 800155e:	041a      	lsls	r2, r3, #16
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43d9      	mvns	r1, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	400b      	ands	r3, r1
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <moving_of_carriage>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void moving_of_carriage(int32_t speed)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
   Center is 32000 at TIM8 after calibration
   Left corner is Left edge position = 38000 tics at TIM8
   Right corner is Right edge position = 26000 tics at TIM8
***********************************************************************************/

  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1); // Enable moving
 8001584:	2102      	movs	r1, #2
 8001586:	4823      	ldr	r0, [pc, #140]	; (8001614 <moving_of_carriage+0x98>)
 8001588:	f7ff ffc1 	bl	800150e <LL_GPIO_SetOutputPin>

  if (speed == 0)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10e      	bne.n	80015b0 <moving_of_carriage+0x34>
  {
      LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1); // Stop moving
 8001592:	2102      	movs	r1, #2
 8001594:	481f      	ldr	r0, [pc, #124]	; (8001614 <moving_of_carriage+0x98>)
 8001596:	f7ff ffc8 	bl	800152a <LL_GPIO_ResetOutputPin>
      LL_TIM_OC_SetCompareCH3(TIM2, 0);             // Stop moving
 800159a:	2100      	movs	r1, #0
 800159c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015a0:	f7ff ffa7 	bl	80014f2 <LL_TIM_OC_SetCompareCH3>
      LL_TIM_OC_SetCompareCH2(TIM2, 0);             // Stop moving
 80015a4:	2100      	movs	r1, #0
 80015a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015aa:	f7ff ff94 	bl	80014d6 <LL_TIM_OC_SetCompareCH2>

    LL_TIM_OC_SetCompareCH2(TIM2, 0);            // Left moving
    LL_TIM_OC_SetCompareCH3(TIM2, (uint32_t)(speed + 50));        // Left moving
  }

}
 80015ae:	e02c      	b.n	800160a <moving_of_carriage+0x8e>
  else if (speed < 0)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da13      	bge.n	80015de <moving_of_carriage+0x62>
    if (speed < -500)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 80015bc:	da01      	bge.n	80015c2 <moving_of_carriage+0x46>
      speed = -500;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <moving_of_carriage+0x9c>)
 80015c0:	607b      	str	r3, [r7, #4]
    LL_TIM_OC_SetCompareCH3(TIM2, 0);            // Right moving
 80015c2:	2100      	movs	r1, #0
 80015c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015c8:	f7ff ff93 	bl	80014f2 <LL_TIM_OC_SetCompareCH3>
    LL_TIM_OC_SetCompareCH2(TIM2, (-((int32_t)speed)) + 17);       // Right moving
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f1c3 0311 	rsb	r3, r3, #17
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015d8:	f7ff ff7d 	bl	80014d6 <LL_TIM_OC_SetCompareCH2>
}
 80015dc:	e015      	b.n	800160a <moving_of_carriage+0x8e>
  else if (speed > 0)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dd12      	ble.n	800160a <moving_of_carriage+0x8e>
    if (speed > 500)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015ea:	dd02      	ble.n	80015f2 <moving_of_carriage+0x76>
    		speed = 500;
 80015ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015f0:	607b      	str	r3, [r7, #4]
    LL_TIM_OC_SetCompareCH2(TIM2, 0);            // Left moving
 80015f2:	2100      	movs	r1, #0
 80015f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015f8:	f7ff ff6d 	bl	80014d6 <LL_TIM_OC_SetCompareCH2>
    LL_TIM_OC_SetCompareCH3(TIM2, (uint32_t)(speed + 50));        // Left moving
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3332      	adds	r3, #50	; 0x32
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001606:	f7ff ff74 	bl	80014f2 <LL_TIM_OC_SetCompareCH3>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40020800 	.word	0x40020800
 8001618:	fffffe0c 	.word	0xfffffe0c

0800161c <Buzzer_Start>:
void Buzzer_Start(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8001620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <Buzzer_Start+0x48>)
 8001626:	f7ff ff8f 	bl	8001548 <LL_GPIO_TogglePin>
	LL_mDelay(100);
 800162a:	2064      	movs	r0, #100	; 0x64
 800162c:	f002 f9b2 	bl	8003994 <LL_mDelay>
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8001630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <Buzzer_Start+0x48>)
 8001636:	f7ff ff87 	bl	8001548 <LL_GPIO_TogglePin>
	LL_mDelay(100);
 800163a:	2064      	movs	r0, #100	; 0x64
 800163c:	f002 f9aa 	bl	8003994 <LL_mDelay>
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8001640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <Buzzer_Start+0x48>)
 8001646:	f7ff ff7f 	bl	8001548 <LL_GPIO_TogglePin>
	LL_mDelay(100);
 800164a:	2064      	movs	r0, #100	; 0x64
 800164c:	f002 f9a2 	bl	8003994 <LL_mDelay>
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8001650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <Buzzer_Start+0x48>)
 8001656:	f7ff ff77 	bl	8001548 <LL_GPIO_TogglePin>
	LL_mDelay(100);
 800165a:	2064      	movs	r0, #100	; 0x64
 800165c:	f002 f99a 	bl	8003994 <LL_mDelay>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b09e      	sub	sp, #120	; 0x78
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800166e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001672:	f7ff fec1 	bl	80013f8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001676:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800167a:	f7ff fea5 	bl	80013c8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800167e:	2007      	movs	r0, #7
 8001680:	f7ff fdb2 	bl	80011e8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001684:	f000 f952 	bl	800192c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001688:	f7ff fc62 	bl	8000f50 <MX_GPIO_Init>
  MX_TIM2_Init();
 800168c:	f000 fd02 	bl	8002094 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001690:	f000 fd8a 	bl	80021a8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001694:	f000 fe48 	bl	8002328 <MX_TIM8_Init>
  MX_UART5_Init();
 8001698:	f000 ff1e 	bl	80024d8 <MX_UART5_Init>
  MX_TIM5_Init();
 800169c:	f000 fe14 	bl	80022c8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//  Buzzer_Start();

  TIM4->CR1 |= (1<<0); // Start timer 4 to read encoder
 80016a0:	4b9b      	ldr	r3, [pc, #620]	; (8001910 <main+0x2a8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a9a      	ldr	r2, [pc, #616]	; (8001910 <main+0x2a8>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]
  TIM8->CR1 |= (1<<0); // Start timer 8 to read encoder
 80016ac:	4b99      	ldr	r3, [pc, #612]	; (8001914 <main+0x2ac>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a98      	ldr	r2, [pc, #608]	; (8001914 <main+0x2ac>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]
  TIM5->CR1 |= (1<<0); // Start timer 3
 80016b8:	4b97      	ldr	r3, [pc, #604]	; (8001918 <main+0x2b0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a96      	ldr	r2, [pc, #600]	; (8001918 <main+0x2b0>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]
  UART5->CR1 |= USART_CR1_TE | USART_CR1_RE ; // разрешаем приемник и передатчик
 80016c4:	4b95      	ldr	r3, [pc, #596]	; (800191c <main+0x2b4>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4a94      	ldr	r2, [pc, #592]	; (800191c <main+0x2b4>)
 80016ca:	f043 030c 	orr.w	r3, r3, #12
 80016ce:	60d3      	str	r3, [r2, #12]
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 80016d0:	2110      	movs	r1, #16
 80016d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016d6:	f7ff feed 	bl	80014b4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 80016da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016e2:	f7ff fee7 	bl	80014b4 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 80016e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016ea:	f7ff fed3 	bl	8001494 <LL_TIM_EnableCounter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Buzzer_Start();
 80016ee:	f7ff ff95 	bl	800161c <Buzzer_Start>
//  LL_mDelay(100);
//  moving_of_carriage(0);
//  uint32_t t = TIM5->CNT;
//  uint32_t e = TIM8->CNT;

  while(abs(TIM4->CNT - 32000) != 500);
 80016f2:	bf00      	nop
 80016f4:	4b86      	ldr	r3, [pc, #536]	; (8001910 <main+0x2a8>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bfb8      	it	lt
 8001700:	425b      	neglt	r3, r3
 8001702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001706:	d1f5      	bne.n	80016f4 <main+0x8c>
  TIM4->CNT = 32000;
 8001708:	4b81      	ldr	r3, [pc, #516]	; (8001910 <main+0x2a8>)
 800170a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
//  uint32_t x = 0;
//  uint32_t last_x = 0;
//  uint32_t last_alp = 0;
//  uint32_t lastTimeMicros = 0;

  double PIDp_pend = 30;
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b82      	ldr	r3, [pc, #520]	; (8001920 <main+0x2b8>)
 8001716:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  double PIDd_pend = 45;
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b81      	ldr	r3, [pc, #516]	; (8001924 <main+0x2bc>)
 8001720:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double PIDi_pend = 1.6;
 8001724:	a378      	add	r3, pc, #480	; (adr r3, 8001908 <main+0x2a0>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

//  double PIDp_car = 1;
//  double PIDd_car = 0;
//
  double speed = 0;
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  uint32_t neededPos = 32000;
 800173a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800173e:	647b      	str	r3, [r7, #68]	; 0x44
  double err = 0;
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  double last_err = 0;
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  int32_t last_speed = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t sum_err = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	66fb      	str	r3, [r7, #108]	; 0x6c
  double mean_speed[] = {0, 0, 0, 0, 0};
 8001760:	463b      	mov	r3, r7
 8001762:	2228      	movs	r2, #40	; 0x28
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f002 f96e 	bl	8003a48 <memset>
  double mean = 0;
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
//		last_x = x;
//		last_alp = alp;
//		lastTimeMicros = now;
//		LL_mDelay(20);
//	  while(abs(TIM4->CNT - 32000) > 6 && abs(TIM8->CNT - 32000) < 3000){
		  while(abs(TIM4->CNT - 32000) != 500 && abs(TIM8->CNT - 32000) < 4500){
 8001778:	e0a9      	b.n	80018ce <main+0x266>
			  err = (double)(neededPos) - (double)(TIM4->CNT);
 800177a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800177c:	f7fe fe66 	bl	800044c <__aeabi_ui2d>
 8001780:	4604      	mov	r4, r0
 8001782:	460d      	mov	r5, r1
 8001784:	4b62      	ldr	r3, [pc, #392]	; (8001910 <main+0x2a8>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fe5f 	bl	800044c <__aeabi_ui2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4620      	mov	r0, r4
 8001794:	4629      	mov	r1, r5
 8001796:	f7fe fd1b 	bl	80001d0 <__aeabi_dsub>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			  sum_err += err;
 80017a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80017a4:	f7fe fe62 	bl	800046c <__aeabi_i2d>
 80017a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017ac:	f7fe fd12 	bl	80001d4 <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f8d4 	bl	8000964 <__aeabi_d2iz>
 80017bc:	4603      	mov	r3, r0
 80017be:	66fb      	str	r3, [r7, #108]	; 0x6c
			  speed = PIDp_pend * err + PIDd_pend * (err - last_err) + PIDi_pend * sum_err;
 80017c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80017c8:	f7fe feba 	bl	8000540 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	461d      	mov	r5, r3
 80017d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80017dc:	f7fe fcf8 	bl	80001d0 <__aeabi_dsub>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017ec:	f7fe fea8 	bl	8000540 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4620      	mov	r0, r4
 80017f6:	4629      	mov	r1, r5
 80017f8:	f7fe fcec 	bl	80001d4 <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	461d      	mov	r5, r3
 8001804:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001806:	f7fe fe31 	bl	800046c <__aeabi_i2d>
 800180a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800180e:	f7fe fe97 	bl	8000540 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe fcdb 	bl	80001d4 <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			  mean_speed[0] = mean_speed[1];
 8001826:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800182a:	e9c7 2300 	strd	r2, r3, [r7]
			  mean_speed[1] = mean_speed[2];
 800182e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001832:	e9c7 2302 	strd	r2, r3, [r7, #8]
			  mean_speed[2] = mean_speed[3];
 8001836:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800183a:	e9c7 2304 	strd	r2, r3, [r7, #16]
			  mean_speed[3] = mean_speed[4];
 800183e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001842:	e9c7 2306 	strd	r2, r3, [r7, #24]
			  mean_speed[4] = speed;
 8001846:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800184a:	e9c7 2308 	strd	r2, r3, [r7, #32]


			  mean = (mean_speed[0] + mean_speed[1] + mean_speed[2] + mean_speed[3] + mean_speed[4]) / 5;
 800184e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001852:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001856:	f7fe fcbd 	bl	80001d4 <__adddf3>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001866:	f7fe fcb5 	bl	80001d4 <__adddf3>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001876:	f7fe fcad 	bl	80001d4 <__adddf3>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001886:	f7fe fca5 	bl	80001d4 <__adddf3>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <main+0x2c0>)
 8001898:	f7fe ff7c 	bl	8000794 <__aeabi_ddiv>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			  speed = rint(mean);
 80018a4:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80018a8:	f002 f8d6 	bl	8003a58 <rint>
 80018ac:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
			  moving_of_carriage((int32_t)(speed));
 80018b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80018b4:	f7ff f856 	bl	8000964 <__aeabi_d2iz>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe5e 	bl	800157c <moving_of_carriage>
			  last_err = err;
 80018c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018c4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			  LL_mDelay(9);
 80018c8:	2009      	movs	r0, #9
 80018ca:	f002 f863 	bl	8003994 <LL_mDelay>
		  while(abs(TIM4->CNT - 32000) != 500 && abs(TIM8->CNT - 32000) < 4500){
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <main+0x2a8>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bfb8      	it	lt
 80018da:	425b      	neglt	r3, r3
 80018dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018e0:	d00b      	beq.n	80018fa <main+0x292>
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <main+0x2ac>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bfb8      	it	lt
 80018ee:	425b      	neglt	r3, r3
 80018f0:	f241 1293 	movw	r2, #4499	; 0x1193
 80018f4:	4293      	cmp	r3, r2
 80018f6:	f77f af40 	ble.w	800177a <main+0x112>
		  }
		  moving_of_carriage(0);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff fe3e 	bl	800157c <moving_of_carriage>
		  while(abs(TIM4->CNT - 32000) != 500 && abs(TIM8->CNT - 32000) < 4500){
 8001900:	e73a      	b.n	8001778 <main+0x110>
 8001902:	bf00      	nop
 8001904:	f3af 8000 	nop.w
 8001908:	9999999a 	.word	0x9999999a
 800190c:	3ff99999 	.word	0x3ff99999
 8001910:	40000800 	.word	0x40000800
 8001914:	40010400 	.word	0x40010400
 8001918:	40000c00 	.word	0x40000c00
 800191c:	40005000 	.word	0x40005000
 8001920:	403e0000 	.word	0x403e0000
 8001924:	40468000 	.word	0x40468000
 8001928:	40140000 	.word	0x40140000

0800192c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001930:	2005      	movs	r0, #5
 8001932:	f7ff fd79 	bl	8001428 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001936:	bf00      	nop
 8001938:	f7ff fd8a 	bl	8001450 <LL_FLASH_GetLatency>
 800193c:	4603      	mov	r3, r0
 800193e:	2b05      	cmp	r3, #5
 8001940:	d1fa      	bne.n	8001938 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001942:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001946:	f7ff fd91 	bl	800146c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800194a:	f7ff fc71 	bl	8001230 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800194e:	bf00      	nop
 8001950:	f7ff fc7e 	bl	8001250 <LL_RCC_HSE_IsReady>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d1fa      	bne.n	8001950 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
 800195a:	2300      	movs	r3, #0
 800195c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001960:	2108      	movs	r1, #8
 8001962:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001966:	f7ff fd09 	bl	800137c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800196a:	f7ff fce3 	bl	8001334 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800196e:	bf00      	nop
 8001970:	f7ff fcf0 	bl	8001354 <LL_RCC_PLL_IsReady>
 8001974:	4603      	mov	r3, r0
 8001976:	2b01      	cmp	r3, #1
 8001978:	d1fa      	bne.n	8001970 <SystemClock_Config+0x44>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff fc9e 	bl	80012bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001980:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001984:	f7ff fcae 	bl	80012e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001988:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800198c:	f7ff fcbe 	bl	800130c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001990:	2002      	movs	r0, #2
 8001992:	f7ff fc71 	bl	8001278 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001996:	bf00      	nop
 8001998:	f7ff fc82 	bl	80012a0 <LL_RCC_GetSysClkSource>
 800199c:	4603      	mov	r3, r0
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d1fa      	bne.n	8001998 <SystemClock_Config+0x6c>
  {

  }
  LL_Init1msTick(168000000);
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <SystemClock_Config+0x88>)
 80019a4:	f001 ffe8 	bl	8003978 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <SystemClock_Config+0x88>)
 80019aa:	f002 f819 	bl	80039e0 <LL_SetSystemCoreClock>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	0a037a00 	.word	0x0a037a00

080019b8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4013      	ands	r3, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	bf0c      	ite	eq
 80019ce:	2301      	moveq	r3, #1
 80019d0:	2300      	movne	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40013c00 	.word	0x40013c00

080019e4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6153      	str	r3, [r2, #20]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0
//	//end_sensor_signal();
//	SCB->AIRCR = 0x5FA0004; // Software reset of MCU


  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001a5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a62:	f7ff ffa9 	bl	80019b8 <LL_EXTI_IsActiveFlag_0_31>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <EXTI9_5_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 8001a6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a70:	f7ff ffb8 	bl	80019e4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0




  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001a8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a8e:	f7ff ff93 	bl	80019b8 <LL_EXTI_IsActiveFlag_0_31>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001a98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a9c:	f7ff ffa2 	bl	80019e4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4907      	ldr	r1, [pc, #28]	; (8001b1c <__NVIC_EnableIRQ+0x38>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <LL_AHB1_GRP1_EnableClock>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40023800 	.word	0x40023800

08001c0c <LL_APB1_GRP1_EnableClock>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4013      	ands	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40023800 	.word	0x40023800

08001c3c <LL_APB2_GRP1_EnableClock>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c48:	4907      	ldr	r1, [pc, #28]	; (8001c68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4013      	ands	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40023800 	.word	0x40023800

08001c6c <LL_TIM_DisableARRPreload>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_TIM_OC_DisableFast>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d01c      	beq.n	8001cd6 <LL_TIM_OC_DisableFast+0x4a>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d017      	beq.n	8001cd2 <LL_TIM_OC_DisableFast+0x46>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d012      	beq.n	8001cce <LL_TIM_OC_DisableFast+0x42>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b40      	cmp	r3, #64	; 0x40
 8001cac:	d00d      	beq.n	8001cca <LL_TIM_OC_DisableFast+0x3e>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb4:	d007      	beq.n	8001cc6 <LL_TIM_OC_DisableFast+0x3a>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbc:	d101      	bne.n	8001cc2 <LL_TIM_OC_DisableFast+0x36>
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	e00a      	b.n	8001cd8 <LL_TIM_OC_DisableFast+0x4c>
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	e008      	b.n	8001cd8 <LL_TIM_OC_DisableFast+0x4c>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <LL_TIM_OC_DisableFast+0x4c>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <LL_TIM_OC_DisableFast+0x4c>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <LL_TIM_OC_DisableFast+0x4c>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_TIM_OC_DisableFast+0x4c>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3318      	adds	r3, #24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LL_TIM_OC_DisableFast+0x84>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	440b      	add	r3, r1
 8001ce8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	4908      	ldr	r1, [pc, #32]	; (8001d14 <LL_TIM_OC_DisableFast+0x88>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	408b      	lsls	r3, r1
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	08003ba8 	.word	0x08003ba8
 8001d14:	08003bb0 	.word	0x08003bb0

08001d18 <LL_TIM_OC_EnablePreload>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d01c      	beq.n	8001d62 <LL_TIM_OC_EnablePreload+0x4a>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d017      	beq.n	8001d5e <LL_TIM_OC_EnablePreload+0x46>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d012      	beq.n	8001d5a <LL_TIM_OC_EnablePreload+0x42>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	d00d      	beq.n	8001d56 <LL_TIM_OC_EnablePreload+0x3e>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d40:	d007      	beq.n	8001d52 <LL_TIM_OC_EnablePreload+0x3a>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d48:	d101      	bne.n	8001d4e <LL_TIM_OC_EnablePreload+0x36>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e00a      	b.n	8001d64 <LL_TIM_OC_EnablePreload+0x4c>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e008      	b.n	8001d64 <LL_TIM_OC_EnablePreload+0x4c>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e006      	b.n	8001d64 <LL_TIM_OC_EnablePreload+0x4c>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e004      	b.n	8001d64 <LL_TIM_OC_EnablePreload+0x4c>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e002      	b.n	8001d64 <LL_TIM_OC_EnablePreload+0x4c>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_TIM_OC_EnablePreload+0x4c>
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <LL_TIM_OC_EnablePreload+0x80>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	440b      	add	r3, r1
 8001d74:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	4907      	ldr	r1, [pc, #28]	; (8001d9c <LL_TIM_OC_EnablePreload+0x84>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	4619      	mov	r1, r3
 8001d82:	2308      	movs	r3, #8
 8001d84:	408b      	lsls	r3, r1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	601a      	str	r2, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	08003ba8 	.word	0x08003ba8
 8001d9c:	08003bb0 	.word	0x08003bb0

08001da0 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d01c      	beq.n	8001dec <LL_TIM_IC_SetActiveInput+0x4c>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d017      	beq.n	8001de8 <LL_TIM_IC_SetActiveInput+0x48>
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d012      	beq.n	8001de4 <LL_TIM_IC_SetActiveInput+0x44>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b40      	cmp	r3, #64	; 0x40
 8001dc2:	d00d      	beq.n	8001de0 <LL_TIM_IC_SetActiveInput+0x40>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dca:	d007      	beq.n	8001ddc <LL_TIM_IC_SetActiveInput+0x3c>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd2:	d101      	bne.n	8001dd8 <LL_TIM_IC_SetActiveInput+0x38>
 8001dd4:	2305      	movs	r3, #5
 8001dd6:	e00a      	b.n	8001dee <LL_TIM_IC_SetActiveInput+0x4e>
 8001dd8:	2306      	movs	r3, #6
 8001dda:	e008      	b.n	8001dee <LL_TIM_IC_SetActiveInput+0x4e>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e006      	b.n	8001dee <LL_TIM_IC_SetActiveInput+0x4e>
 8001de0:	2303      	movs	r3, #3
 8001de2:	e004      	b.n	8001dee <LL_TIM_IC_SetActiveInput+0x4e>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e002      	b.n	8001dee <LL_TIM_IC_SetActiveInput+0x4e>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <LL_TIM_IC_SetActiveInput+0x4e>
 8001dec:	2300      	movs	r3, #0
 8001dee:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3318      	adds	r3, #24
 8001df4:	4619      	mov	r1, r3
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <LL_TIM_IC_SetActiveInput+0x94>)
 8001dfa:	5cd3      	ldrb	r3, [r2, r3]
 8001dfc:	440b      	add	r3, r1
 8001dfe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	490c      	ldr	r1, [pc, #48]	; (8001e38 <LL_TIM_IC_SetActiveInput+0x98>)
 8001e08:	5ccb      	ldrb	r3, [r1, r3]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	408b      	lsls	r3, r1
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	7df9      	ldrb	r1, [r7, #23]
 8001e1a:	4807      	ldr	r0, [pc, #28]	; (8001e38 <LL_TIM_IC_SetActiveInput+0x98>)
 8001e1c:	5c41      	ldrb	r1, [r0, r1]
 8001e1e:	408b      	lsls	r3, r1
 8001e20:	431a      	orrs	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	601a      	str	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	08003ba8 	.word	0x08003ba8
 8001e38:	08003bb8 	.word	0x08003bb8

08001e3c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d01c      	beq.n	8001e88 <LL_TIM_IC_SetPrescaler+0x4c>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d017      	beq.n	8001e84 <LL_TIM_IC_SetPrescaler+0x48>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d012      	beq.n	8001e80 <LL_TIM_IC_SetPrescaler+0x44>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d00d      	beq.n	8001e7c <LL_TIM_IC_SetPrescaler+0x40>
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e66:	d007      	beq.n	8001e78 <LL_TIM_IC_SetPrescaler+0x3c>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6e:	d101      	bne.n	8001e74 <LL_TIM_IC_SetPrescaler+0x38>
 8001e70:	2305      	movs	r3, #5
 8001e72:	e00a      	b.n	8001e8a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e74:	2306      	movs	r3, #6
 8001e76:	e008      	b.n	8001e8a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e006      	b.n	8001e8a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e004      	b.n	8001e8a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e002      	b.n	8001e8a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3318      	adds	r3, #24
 8001e90:	4619      	mov	r1, r3
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <LL_TIM_IC_SetPrescaler+0x94>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	440b      	add	r3, r1
 8001e9a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <LL_TIM_IC_SetPrescaler+0x98>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	230c      	movs	r3, #12
 8001eaa:	408b      	lsls	r3, r1
 8001eac:	43db      	mvns	r3, r3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	7df9      	ldrb	r1, [r7, #23]
 8001eb6:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <LL_TIM_IC_SetPrescaler+0x98>)
 8001eb8:	5c41      	ldrb	r1, [r0, r1]
 8001eba:	408b      	lsls	r3, r1
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	601a      	str	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	08003ba8 	.word	0x08003ba8
 8001ed4:	08003bb8 	.word	0x08003bb8

08001ed8 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d01c      	beq.n	8001f24 <LL_TIM_IC_SetFilter+0x4c>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d017      	beq.n	8001f20 <LL_TIM_IC_SetFilter+0x48>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d012      	beq.n	8001f1c <LL_TIM_IC_SetFilter+0x44>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d00d      	beq.n	8001f18 <LL_TIM_IC_SetFilter+0x40>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f02:	d007      	beq.n	8001f14 <LL_TIM_IC_SetFilter+0x3c>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0a:	d101      	bne.n	8001f10 <LL_TIM_IC_SetFilter+0x38>
 8001f0c:	2305      	movs	r3, #5
 8001f0e:	e00a      	b.n	8001f26 <LL_TIM_IC_SetFilter+0x4e>
 8001f10:	2306      	movs	r3, #6
 8001f12:	e008      	b.n	8001f26 <LL_TIM_IC_SetFilter+0x4e>
 8001f14:	2304      	movs	r3, #4
 8001f16:	e006      	b.n	8001f26 <LL_TIM_IC_SetFilter+0x4e>
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e004      	b.n	8001f26 <LL_TIM_IC_SetFilter+0x4e>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e002      	b.n	8001f26 <LL_TIM_IC_SetFilter+0x4e>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <LL_TIM_IC_SetFilter+0x4e>
 8001f24:	2300      	movs	r3, #0
 8001f26:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3318      	adds	r3, #24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <LL_TIM_IC_SetFilter+0x94>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	440b      	add	r3, r1
 8001f36:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	490c      	ldr	r1, [pc, #48]	; (8001f70 <LL_TIM_IC_SetFilter+0x98>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	4619      	mov	r1, r3
 8001f44:	23f0      	movs	r3, #240	; 0xf0
 8001f46:	408b      	lsls	r3, r1
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0c1b      	lsrs	r3, r3, #16
 8001f50:	7df9      	ldrb	r1, [r7, #23]
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <LL_TIM_IC_SetFilter+0x98>)
 8001f54:	5c41      	ldrb	r1, [r0, r1]
 8001f56:	408b      	lsls	r3, r1
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	601a      	str	r2, [r3, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	08003ba8 	.word	0x08003ba8
 8001f70:	08003bb8 	.word	0x08003bb8

08001f74 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d01c      	beq.n	8001fc0 <LL_TIM_IC_SetPolarity+0x4c>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d017      	beq.n	8001fbc <LL_TIM_IC_SetPolarity+0x48>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d012      	beq.n	8001fb8 <LL_TIM_IC_SetPolarity+0x44>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d00d      	beq.n	8001fb4 <LL_TIM_IC_SetPolarity+0x40>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f9e:	d007      	beq.n	8001fb0 <LL_TIM_IC_SetPolarity+0x3c>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa6:	d101      	bne.n	8001fac <LL_TIM_IC_SetPolarity+0x38>
 8001fa8:	2305      	movs	r3, #5
 8001faa:	e00a      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fac:	2306      	movs	r3, #6
 8001fae:	e008      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e006      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e004      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	490b      	ldr	r1, [pc, #44]	; (8001ff8 <LL_TIM_IC_SetPolarity+0x84>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	408b      	lsls	r3, r1
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <LL_TIM_IC_SetPolarity+0x84>)
 8001fdc:	5ccb      	ldrb	r3, [r1, r3]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	408b      	lsls	r3, r1
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	08003bc0 	.word	0x08003bc0

08001ffc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200e:	f023 0307 	bic.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	609a      	str	r2, [r3, #8]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 0207 	bic.w	r2, r3, #7
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	605a      	str	r2, [r3, #4]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	609a      	str	r2, [r3, #8]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b094      	sub	sp, #80	; 0x50
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800209a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	2220      	movs	r2, #32
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 fcc8 	bl	8003a48 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	611a      	str	r2, [r3, #16]
 80020c6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7ff fd9f 	bl	8001c0c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 80020ce:	2304      	movs	r3, #4
 80020d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80020d2:	2300      	movs	r3, #0
 80020d4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000;
 80020d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020da:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80020e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020ea:	f000 fec5 	bl	8002e78 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80020ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020f2:	f7ff fdbb 	bl	8001c6c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80020f6:	2100      	movs	r1, #0
 80020f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020fc:	f7ff ff7e 	bl	8001ffc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8002100:	2110      	movs	r1, #16
 8002102:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002106:	f7ff fe07 	bl	8001d18 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800210a:	2360      	movs	r3, #96	; 0x60
 800210c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	461a      	mov	r2, r3
 8002124:	2110      	movs	r1, #16
 8002126:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800212a:	f000 ff3f 	bl	8002fac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 800212e:	2110      	movs	r1, #16
 8002130:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002134:	f7ff fdaa 	bl	8001c8c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8002138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002140:	f7ff fdea 	bl	8001d18 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	461a      	mov	r2, r3
 800214a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002152:	f000 ff2b 	bl	8002fac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8002156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800215a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800215e:	f7ff fd95 	bl	8001c8c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002162:	2100      	movs	r1, #0
 8002164:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002168:	f7ff ff70 	bl	800204c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800216c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002170:	f7ff ff7f 	bl	8002072 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002174:	2001      	movs	r0, #1
 8002176:	f7ff fd31 	bl	8001bdc <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 800217a:	2306      	movs	r3, #6
 800217c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800217e:	2302      	movs	r3, #2
 8002180:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4803      	ldr	r0, [pc, #12]	; (80021a4 <MX_TIM2_Init+0x110>)
 8002198:	f000 fc4e 	bl	8002a38 <LL_GPIO_Init>

}
 800219c:	bf00      	nop
 800219e:	3750      	adds	r7, #80	; 0x50
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40020000 	.word	0x40020000

080021a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80021ce:	2004      	movs	r0, #4
 80021d0:	f7ff fd1c 	bl	8001c0c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7ff fd01 	bl	8001bdc <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80021da:	23c0      	movs	r3, #192	; 0xc0
 80021dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021de:	2302      	movs	r3, #2
 80021e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	4832      	ldr	r0, [pc, #200]	; (80022c0 <MX_TIM4_Init+0x118>)
 80021f8:	f000 fc1e 	bl	8002a38 <LL_GPIO_Init>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80021fc:	f7ff fc64 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8002200:	4603      	mov	r3, r0
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fcb4 	bl	8001b74 <NVIC_EncodePriority>
 800220c:	4603      	mov	r3, r0
 800220e:	4619      	mov	r1, r3
 8002210:	201e      	movs	r0, #30
 8002212:	f7ff fc85 	bl	8001b20 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8002216:	201e      	movs	r0, #30
 8002218:	f7ff fc64 	bl	8001ae4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 800221c:	2101      	movs	r1, #1
 800221e:	4829      	ldr	r0, [pc, #164]	; (80022c4 <MX_TIM4_Init+0x11c>)
 8002220:	f7ff ff01 	bl	8002026 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002224:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002228:	2101      	movs	r1, #1
 800222a:	4826      	ldr	r0, [pc, #152]	; (80022c4 <MX_TIM4_Init+0x11c>)
 800222c:	f7ff fdb8 	bl	8001da0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002230:	2200      	movs	r2, #0
 8002232:	2101      	movs	r1, #1
 8002234:	4823      	ldr	r0, [pc, #140]	; (80022c4 <MX_TIM4_Init+0x11c>)
 8002236:	f7ff fe01 	bl	8001e3c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 800223a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800223e:	2101      	movs	r1, #1
 8002240:	4820      	ldr	r0, [pc, #128]	; (80022c4 <MX_TIM4_Init+0x11c>)
 8002242:	f7ff fe49 	bl	8001ed8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002246:	2200      	movs	r2, #0
 8002248:	2101      	movs	r1, #1
 800224a:	481e      	ldr	r0, [pc, #120]	; (80022c4 <MX_TIM4_Init+0x11c>)
 800224c:	f7ff fe92 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002250:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002254:	2110      	movs	r1, #16
 8002256:	481b      	ldr	r0, [pc, #108]	; (80022c4 <MX_TIM4_Init+0x11c>)
 8002258:	f7ff fda2 	bl	8001da0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800225c:	2200      	movs	r2, #0
 800225e:	2110      	movs	r1, #16
 8002260:	4818      	ldr	r0, [pc, #96]	; (80022c4 <MX_TIM4_Init+0x11c>)
 8002262:	f7ff fdeb 	bl	8001e3c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 8002266:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800226a:	2110      	movs	r1, #16
 800226c:	4815      	ldr	r0, [pc, #84]	; (80022c4 <MX_TIM4_Init+0x11c>)
 800226e:	f7ff fe33 	bl	8001ed8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002272:	2200      	movs	r2, #0
 8002274:	2110      	movs	r1, #16
 8002276:	4813      	ldr	r0, [pc, #76]	; (80022c4 <MX_TIM4_Init+0x11c>)
 8002278:	f7ff fe7c 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800228a:	2300      	movs	r3, #0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	480b      	ldr	r0, [pc, #44]	; (80022c4 <MX_TIM4_Init+0x11c>)
 8002296:	f000 fdef 	bl	8002e78 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800229a:	480a      	ldr	r0, [pc, #40]	; (80022c4 <MX_TIM4_Init+0x11c>)
 800229c:	f7ff fce6 	bl	8001c6c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_CC1IF);
 80022a0:	2130      	movs	r1, #48	; 0x30
 80022a2:	4808      	ldr	r0, [pc, #32]	; (80022c4 <MX_TIM4_Init+0x11c>)
 80022a4:	f7ff fed2 	bl	800204c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <MX_TIM4_Init+0x11c>)
 80022aa:	f7ff fee2 	bl	8002072 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */
  TIM4->CNT = 32000; // Write this number to register to avoid negative numbers and overflow
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <MX_TIM4_Init+0x11c>)
 80022b0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM4_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	3730      	adds	r7, #48	; 0x30
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40000800 	.word	0x40000800

080022c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80022dc:	2008      	movs	r0, #8
 80022de:	f7ff fc95 	bl	8001c0c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 42;
 80022e2:	232a      	movs	r3, #42	; 0x2a
 80022e4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ee:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	480a      	ldr	r0, [pc, #40]	; (8002324 <MX_TIM5_Init+0x5c>)
 80022fa:	f000 fdbd 	bl	8002e78 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 80022fe:	4809      	ldr	r0, [pc, #36]	; (8002324 <MX_TIM5_Init+0x5c>)
 8002300:	f7ff fcb4 	bl	8001c6c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002304:	2100      	movs	r1, #0
 8002306:	4807      	ldr	r0, [pc, #28]	; (8002324 <MX_TIM5_Init+0x5c>)
 8002308:	f7ff fe78 	bl	8001ffc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800230c:	2100      	movs	r1, #0
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_TIM5_Init+0x5c>)
 8002310:	f7ff fe9c 	bl	800204c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <MX_TIM5_Init+0x5c>)
 8002316:	f7ff feac 	bl	8002072 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40000c00 	.word	0x40000c00

08002328 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08c      	sub	sp, #48	; 0x30
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
 800234c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 800234e:	2002      	movs	r0, #2
 8002350:	f7ff fc74 	bl	8001c3c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002354:	2004      	movs	r0, #4
 8002356:	f7ff fc41 	bl	8001bdc <LL_AHB1_GRP1_EnableClock>
  /**TIM8 GPIO Configuration
  PC6   ------> TIM8_CH1
  PC7   ------> TIM8_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800235a:	23c0      	movs	r3, #192	; 0xc0
 800235c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800235e:	2302      	movs	r3, #2
 8002360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800236a:	2301      	movs	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 800236e:	2303      	movs	r3, #3
 8002370:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	4619      	mov	r1, r3
 8002376:	482b      	ldr	r0, [pc, #172]	; (8002424 <MX_TIM8_Init+0xfc>)
 8002378:	f000 fb5e 	bl	8002a38 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  LL_TIM_SetEncoderMode(TIM8, LL_TIM_ENCODERMODE_X2_TI1);
 800237c:	2101      	movs	r1, #1
 800237e:	482a      	ldr	r0, [pc, #168]	; (8002428 <MX_TIM8_Init+0x100>)
 8002380:	f7ff fe51 	bl	8002026 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002384:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002388:	2101      	movs	r1, #1
 800238a:	4827      	ldr	r0, [pc, #156]	; (8002428 <MX_TIM8_Init+0x100>)
 800238c:	f7ff fd08 	bl	8001da0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002390:	2200      	movs	r2, #0
 8002392:	2101      	movs	r1, #1
 8002394:	4824      	ldr	r0, [pc, #144]	; (8002428 <MX_TIM8_Init+0x100>)
 8002396:	f7ff fd51 	bl	8001e3c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 800239a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800239e:	2101      	movs	r1, #1
 80023a0:	4821      	ldr	r0, [pc, #132]	; (8002428 <MX_TIM8_Init+0x100>)
 80023a2:	f7ff fd99 	bl	8001ed8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2101      	movs	r1, #1
 80023aa:	481f      	ldr	r0, [pc, #124]	; (8002428 <MX_TIM8_Init+0x100>)
 80023ac:	f7ff fde2 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80023b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023b4:	2110      	movs	r1, #16
 80023b6:	481c      	ldr	r0, [pc, #112]	; (8002428 <MX_TIM8_Init+0x100>)
 80023b8:	f7ff fcf2 	bl	8001da0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80023bc:	2200      	movs	r2, #0
 80023be:	2110      	movs	r1, #16
 80023c0:	4819      	ldr	r0, [pc, #100]	; (8002428 <MX_TIM8_Init+0x100>)
 80023c2:	f7ff fd3b 	bl	8001e3c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 80023c6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80023ca:	2110      	movs	r1, #16
 80023cc:	4816      	ldr	r0, [pc, #88]	; (8002428 <MX_TIM8_Init+0x100>)
 80023ce:	f7ff fd83 	bl	8001ed8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2110      	movs	r1, #16
 80023d6:	4814      	ldr	r0, [pc, #80]	; (8002428 <MX_TIM8_Init+0x100>)
 80023d8:	f7ff fdcc 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80023e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	4619      	mov	r1, r3
 80023f8:	480b      	ldr	r0, [pc, #44]	; (8002428 <MX_TIM8_Init+0x100>)
 80023fa:	f000 fd3d 	bl	8002e78 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 80023fe:	480a      	ldr	r0, [pc, #40]	; (8002428 <MX_TIM8_Init+0x100>)
 8002400:	f7ff fc34 	bl	8001c6c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8002404:	2100      	movs	r1, #0
 8002406:	4808      	ldr	r0, [pc, #32]	; (8002428 <MX_TIM8_Init+0x100>)
 8002408:	f7ff fe20 	bl	800204c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 800240c:	4806      	ldr	r0, [pc, #24]	; (8002428 <MX_TIM8_Init+0x100>)
 800240e:	f7ff fe30 	bl	8002072 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM8_Init 2 */
  TIM8->CNT = 32000; // Write this number to register to avoid negative numbers and overflow
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <MX_TIM8_Init+0x100>)
 8002414:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM8_Init 2 */

}
 800241a:	bf00      	nop
 800241c:	3730      	adds	r7, #48	; 0x30
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40020800 	.word	0x40020800
 8002428:	40010400 	.word	0x40010400

0800242c <LL_AHB1_GRP1_EnableClock>:
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002438:	4907      	ldr	r1, [pc, #28]	; (8002458 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4313      	orrs	r3, r2
 800243e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4013      	ands	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40023800 	.word	0x40023800

0800245c <LL_APB1_GRP1_EnableClock>:
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <LL_APB1_GRP1_EnableClock+0x2c>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4313      	orrs	r3, r2
 800246e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4013      	ands	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40023800 	.word	0x40023800

0800248c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	615a      	str	r2, [r3, #20]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08e      	sub	sp, #56	; 0x38
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]
 80024ee:	615a      	str	r2, [r3, #20]
 80024f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8002502:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002506:	f7ff ffa9 	bl	800245c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800250a:	2004      	movs	r0, #4
 800250c:	f7ff ff8e 	bl	800242c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002510:	2008      	movs	r0, #8
 8002512:	f7ff ff8b 	bl	800242c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8002516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800251c:	2302      	movs	r3, #2
 800251e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800252c:	2308      	movs	r3, #8
 800252e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	4619      	mov	r1, r3
 8002534:	4819      	ldr	r0, [pc, #100]	; (800259c <MX_UART5_Init+0xc4>)
 8002536:	f000 fa7f 	bl	8002a38 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800253a:	2304      	movs	r3, #4
 800253c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800253e:	2302      	movs	r3, #2
 8002540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800254e:	2308      	movs	r3, #8
 8002550:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4812      	ldr	r0, [pc, #72]	; (80025a0 <MX_UART5_Init+0xc8>)
 8002558:	f000 fa6e 	bl	8002a38 <LL_GPIO_Init>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800255c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002560:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800256e:	230c      	movs	r3, #12
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002572:	2300      	movs	r3, #0
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002576:	2300      	movs	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	4619      	mov	r1, r3
 8002580:	4808      	ldr	r0, [pc, #32]	; (80025a4 <MX_UART5_Init+0xcc>)
 8002582:	f001 f95f 	bl	8003844 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002586:	4807      	ldr	r0, [pc, #28]	; (80025a4 <MX_UART5_Init+0xcc>)
 8002588:	f7ff ff90 	bl	80024ac <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_UART5_Init+0xcc>)
 800258e:	f7ff ff7d 	bl	800248c <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	3738      	adds	r7, #56	; 0x38
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40005000 	.word	0x40005000

080025a8 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 80025a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025ac:	480d      	ldr	r0, [pc, #52]	; (80025e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025ae:	490e      	ldr	r1, [pc, #56]	; (80025e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b0:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c4:	4c0b      	ldr	r4, [pc, #44]	; (80025f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025d2:	f7ff fa67 	bl	8001aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d6:	f001 fa13 	bl	8003a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025da:	f7ff f845 	bl	8001668 <main>
  bx  lr    
 80025de:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 80025e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80025ec:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 80025f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80025f4:	20000020 	.word	0x20000020

080025f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f8:	e7fe      	b.n	80025f8 <ADC_IRQHandler>
	...

080025fc <LL_EXTI_EnableIT_0_31>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <LL_EXTI_EnableIT_0_31+0x20>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4904      	ldr	r1, [pc, #16]	; (800261c <LL_EXTI_EnableIT_0_31+0x20>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40013c00 	.word	0x40013c00

08002620 <LL_EXTI_DisableIT_0_31>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <LL_EXTI_DisableIT_0_31+0x24>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	43db      	mvns	r3, r3
 8002630:	4904      	ldr	r1, [pc, #16]	; (8002644 <LL_EXTI_DisableIT_0_31+0x24>)
 8002632:	4013      	ands	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40013c00 	.word	0x40013c00

08002648 <LL_EXTI_EnableEvent_0_31>:
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4904      	ldr	r1, [pc, #16]	; (8002668 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40013c00 	.word	0x40013c00

0800266c <LL_EXTI_DisableEvent_0_31>:
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	43db      	mvns	r3, r3
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <LL_EXTI_DisableEvent_0_31+0x24>)
 800267e:	4013      	ands	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40013c00 	.word	0x40013c00

08002694 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4904      	ldr	r1, [pc, #16]	; (80026b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	4904      	ldr	r1, [pc, #16]	; (80026dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40013c00 	.word	0x40013c00

080026e0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	4904      	ldr	r1, [pc, #16]	; (8002700 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60cb      	str	r3, [r1, #12]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40013c00 	.word	0x40013c00

08002704 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	43db      	mvns	r3, r3
 8002714:	4904      	ldr	r1, [pc, #16]	; (8002728 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002716:	4013      	ands	r3, r2
 8002718:	60cb      	str	r3, [r1, #12]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40013c00 	.word	0x40013c00

0800272c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d065      	beq.n	800280c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d06c      	beq.n	8002822 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	795b      	ldrb	r3, [r3, #5]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d01c      	beq.n	800278a <LL_EXTI_Init+0x5e>
 8002750:	2b02      	cmp	r3, #2
 8002752:	dc25      	bgt.n	80027a0 <LL_EXTI_Init+0x74>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <LL_EXTI_Init+0x32>
 8002758:	2b01      	cmp	r3, #1
 800275a:	d00b      	beq.n	8002774 <LL_EXTI_Init+0x48>
 800275c:	e020      	b.n	80027a0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff ff82 	bl	800266c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff45 	bl	80025fc <LL_EXTI_EnableIT_0_31>
          break;
 8002772:	e018      	b.n	80027a6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff51 	bl	8002620 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff60 	bl	8002648 <LL_EXTI_EnableEvent_0_31>
          break;
 8002788:	e00d      	b.n	80027a6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff34 	bl	80025fc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff55 	bl	8002648 <LL_EXTI_EnableEvent_0_31>
          break;
 800279e:	e002      	b.n	80027a6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
          break;
 80027a4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	799b      	ldrb	r3, [r3, #6]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d039      	beq.n	8002822 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	799b      	ldrb	r3, [r3, #6]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d01c      	beq.n	80027f0 <LL_EXTI_Init+0xc4>
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	dc25      	bgt.n	8002806 <LL_EXTI_Init+0xda>
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d002      	beq.n	80027c4 <LL_EXTI_Init+0x98>
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d00b      	beq.n	80027da <LL_EXTI_Init+0xae>
 80027c2:	e020      	b.n	8002806 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff9b 	bl	8002704 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff5e 	bl	8002694 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80027d8:	e024      	b.n	8002824 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff6a 	bl	80026b8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff79 	bl	80026e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80027ee:	e019      	b.n	8002824 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff4d 	bl	8002694 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff6e 	bl	80026e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002804:	e00e      	b.n	8002824 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
            break;
 800280a:	e00b      	b.n	8002824 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff05 	bl	8002620 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff26 	bl	800266c <LL_EXTI_DisableEvent_0_31>
 8002820:	e000      	b.n	8002824 <LL_EXTI_Init+0xf8>
      }
 8002822:	bf00      	nop
  }
  return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <LL_GPIO_SetPinMode>:
{
 800282e:	b480      	push	{r7}
 8002830:	b089      	sub	sp, #36	; 0x24
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	613b      	str	r3, [r7, #16]
  return result;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	2103      	movs	r1, #3
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	401a      	ands	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	61bb      	str	r3, [r7, #24]
  return result;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	431a      	orrs	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	3724      	adds	r7, #36	; 0x24
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_GPIO_SetPinOutputType>:
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	431a      	orrs	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_GPIO_SetPinSpeed>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	613b      	str	r3, [r7, #16]
  return result;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2103      	movs	r1, #3
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	401a      	ands	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	61bb      	str	r3, [r7, #24]
  return result;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	431a      	orrs	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	609a      	str	r2, [r3, #8]
}
 800290e:	bf00      	nop
 8002910:	3724      	adds	r7, #36	; 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <LL_GPIO_SetPinPull>:
{
 800291a:	b480      	push	{r7}
 800291c:	b089      	sub	sp, #36	; 0x24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	613b      	str	r3, [r7, #16]
  return result;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2103      	movs	r1, #3
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	61bb      	str	r3, [r7, #24]
  return result;
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	431a      	orrs	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	60da      	str	r2, [r3, #12]
}
 800296c:	bf00      	nop
 800296e:	3724      	adds	r7, #36	; 0x24
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_GPIO_SetAFPin_0_7>:
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	; 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1a      	ldr	r2, [r3, #32]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	613b      	str	r3, [r7, #16]
  return result;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	210f      	movs	r1, #15
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	61bb      	str	r3, [r7, #24]
  return result;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_GPIO_SetAFPin_8_15>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b089      	sub	sp, #36	; 0x24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	613b      	str	r3, [r7, #16]
  return result;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	210f      	movs	r1, #15
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	61bb      	str	r3, [r7, #24]
  return result;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	431a      	orrs	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a2c:	bf00      	nop
 8002a2e:	3724      	adds	r7, #36	; 0x24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	613b      	str	r3, [r7, #16]
  return result;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002a62:	e050      	b.n	8002b06 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d042      	beq.n	8002b00 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d003      	beq.n	8002a8a <LL_GPIO_Init+0x52>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d10d      	bne.n	8002aa6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	69b9      	ldr	r1, [r7, #24]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ff12 	bl	80028bc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fef3 	bl	800288c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	69b9      	ldr	r1, [r7, #24]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ff33 	bl	800291a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11a      	bne.n	8002af2 <LL_GPIO_Init+0xba>
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	60bb      	str	r3, [r7, #8]
  return result;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b07      	cmp	r3, #7
 8002ad2:	d807      	bhi.n	8002ae4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff4b 	bl	8002978 <LL_GPIO_SetAFPin_0_7>
 8002ae2:	e006      	b.n	8002af2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	69b9      	ldr	r1, [r7, #24]
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff72 	bl	80029d6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	461a      	mov	r2, r3
 8002af8:	69b9      	ldr	r1, [r7, #24]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fe97 	bl	800282e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1a7      	bne.n	8002a64 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <LL_RCC_GetSysClkSource>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <LL_RCC_GetSysClkSource+0x18>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800

08002b3c <LL_RCC_GetAHBPrescaler>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <LL_RCC_GetAHBPrescaler+0x18>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <LL_RCC_GetAPB1Prescaler>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800

08002b74 <LL_RCC_GetAPB2Prescaler>:
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800

08002b90 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <LL_RCC_PLL_GetMainSource+0x18>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <LL_RCC_PLL_GetN+0x18>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40023800 	.word	0x40023800

08002bc8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <LL_RCC_PLL_GetP+0x18>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800

08002be4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <LL_RCC_PLL_GetDivider+0x18>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002c08:	f000 f820 	bl	8002c4c <RCC_GetSystemClockFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f840 	bl	8002c9c <RCC_GetHCLKClockFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f84e 	bl	8002cc8 <RCC_GetPCLK1ClockFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f85a 	bl	8002cf0 <RCC_GetPCLK2ClockFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60da      	str	r2, [r3, #12]
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002c56:	f7ff ff63 	bl	8002b20 <LL_RCC_GetSysClkSource>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d00c      	beq.n	8002c7a <RCC_GetSystemClockFreq+0x2e>
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d80f      	bhi.n	8002c84 <RCC_GetSystemClockFreq+0x38>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <RCC_GetSystemClockFreq+0x22>
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d003      	beq.n	8002c74 <RCC_GetSystemClockFreq+0x28>
 8002c6c:	e00a      	b.n	8002c84 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <RCC_GetSystemClockFreq+0x48>)
 8002c70:	607b      	str	r3, [r7, #4]
      break;
 8002c72:	e00a      	b.n	8002c8a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <RCC_GetSystemClockFreq+0x4c>)
 8002c76:	607b      	str	r3, [r7, #4]
      break;
 8002c78:	e007      	b.n	8002c8a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002c7a:	2008      	movs	r0, #8
 8002c7c:	f000 f84c 	bl	8002d18 <RCC_PLL_GetFreqDomain_SYS>
 8002c80:	6078      	str	r0, [r7, #4]
      break;
 8002c82:	e002      	b.n	8002c8a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <RCC_GetSystemClockFreq+0x48>)
 8002c86:	607b      	str	r3, [r7, #4]
      break;
 8002c88:	bf00      	nop
  }

  return frequency;
 8002c8a:	687b      	ldr	r3, [r7, #4]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002ca4:	f7ff ff4a 	bl	8002b3c <LL_RCC_GetAHBPrescaler>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <RCC_GetHCLKClockFreq+0x28>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	40d3      	lsrs	r3, r2
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	08003b90 	.word	0x08003b90

08002cc8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002cd0:	f7ff ff42 	bl	8002b58 <LL_RCC_GetAPB1Prescaler>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	0a9b      	lsrs	r3, r3, #10
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <RCC_GetPCLK1ClockFreq+0x24>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	40d3      	lsrs	r3, r2
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	08003ba0 	.word	0x08003ba0

08002cf0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002cf8:	f7ff ff3c 	bl	8002b74 <LL_RCC_GetAPB2Prescaler>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	0b5b      	lsrs	r3, r3, #13
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <RCC_GetPCLK2ClockFreq+0x24>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	40d3      	lsrs	r3, r2
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	08003ba0 	.word	0x08003ba0

08002d18 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002d2c:	f7ff ff30 	bl	8002b90 <LL_RCC_PLL_GetMainSource>
 8002d30:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d004      	beq.n	8002d42 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3e:	d003      	beq.n	8002d48 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002d40:	e005      	b.n	8002d4e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002d44:	617b      	str	r3, [r7, #20]
      break;
 8002d46:	e005      	b.n	8002d54 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002d4a:	617b      	str	r3, [r7, #20]
      break;
 8002d4c:	e002      	b.n	8002d54 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002d50:	617b      	str	r3, [r7, #20]
      break;
 8002d52:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d113      	bne.n	8002d82 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d5a:	f7ff ff43 	bl	8002be4 <LL_RCC_PLL_GetDivider>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fbb3 f4f2 	udiv	r4, r3, r2
 8002d66:	f7ff ff21 	bl	8002bac <LL_RCC_PLL_GetN>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	fb03 f404 	mul.w	r4, r3, r4
 8002d70:	f7ff ff2a 	bl	8002bc8 <LL_RCC_PLL_GetP>
 8002d74:	4603      	mov	r3, r0
 8002d76:	0c1b      	lsrs	r3, r3, #16
 8002d78:	3301      	adds	r3, #1
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d80:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002d82:	693b      	ldr	r3, [r7, #16]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	00f42400 	.word	0x00f42400
 8002d90:	007a1200 	.word	0x007a1200

08002d94 <LL_TIM_SetPrescaler>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_TIM_SetAutoReload>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_TIM_SetRepetitionCounter>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_TIM_OC_SetCompareCH1>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_TIM_OC_SetCompareCH2>:
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_TIM_OC_SetCompareCH3>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_TIM_OC_SetCompareCH4>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	615a      	str	r2, [r3, #20]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3d      	ldr	r2, [pc, #244]	; (8002f80 <LL_TIM_Init+0x108>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <LL_TIM_Init+0x40>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e96:	d00f      	beq.n	8002eb8 <LL_TIM_Init+0x40>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a3a      	ldr	r2, [pc, #232]	; (8002f84 <LL_TIM_Init+0x10c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00b      	beq.n	8002eb8 <LL_TIM_Init+0x40>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a39      	ldr	r2, [pc, #228]	; (8002f88 <LL_TIM_Init+0x110>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d007      	beq.n	8002eb8 <LL_TIM_Init+0x40>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a38      	ldr	r2, [pc, #224]	; (8002f8c <LL_TIM_Init+0x114>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <LL_TIM_Init+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a37      	ldr	r2, [pc, #220]	; (8002f90 <LL_TIM_Init+0x118>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d106      	bne.n	8002ec6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <LL_TIM_Init+0x108>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02b      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d027      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <LL_TIM_Init+0x10c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d023      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <LL_TIM_Init+0x110>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01f      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <LL_TIM_Init+0x114>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01b      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <LL_TIM_Init+0x118>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d017      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <LL_TIM_Init+0x11c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <LL_TIM_Init+0x120>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00f      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <LL_TIM_Init+0x124>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a23      	ldr	r2, [pc, #140]	; (8002fa0 <LL_TIM_Init+0x128>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <LL_TIM_Init+0x12c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <LL_TIM_Init+0xae>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <LL_TIM_Init+0x130>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d106      	bne.n	8002f34 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff35 	bl	8002db0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff21 	bl	8002d94 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <LL_TIM_Init+0x108>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <LL_TIM_Init+0xea>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <LL_TIM_Init+0x118>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d105      	bne.n	8002f6e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	4619      	mov	r1, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff2f 	bl	8002dcc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff72 	bl	8002e58 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40010400 	.word	0x40010400
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40014400 	.word	0x40014400
 8002f9c:	40014800 	.word	0x40014800
 8002fa0:	40001800 	.word	0x40001800
 8002fa4:	40001c00 	.word	0x40001c00
 8002fa8:	40002000 	.word	0x40002000

08002fac <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc2:	d027      	beq.n	8003014 <LL_TIM_OC_Init+0x68>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fca:	d82a      	bhi.n	8003022 <LL_TIM_OC_Init+0x76>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd2:	d018      	beq.n	8003006 <LL_TIM_OC_Init+0x5a>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fda:	d822      	bhi.n	8003022 <LL_TIM_OC_Init+0x76>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d003      	beq.n	8002fea <LL_TIM_OC_Init+0x3e>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d007      	beq.n	8002ff8 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002fe8:	e01b      	b.n	8003022 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f81f 	bl	8003030 <OC1Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff6:	e015      	b.n	8003024 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f884 	bl	8003108 <OC2Config>
 8003000:	4603      	mov	r3, r0
 8003002:	75fb      	strb	r3, [r7, #23]
      break;
 8003004:	e00e      	b.n	8003024 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f8ed 	bl	80031e8 <OC3Config>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]
      break;
 8003012:	e007      	b.n	8003024 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f956 	bl	80032c8 <OC4Config>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]
      break;
 8003020:	e000      	b.n	8003024 <LL_TIM_OC_Init+0x78>
      break;
 8003022:	bf00      	nop
  }

  return result;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f023 0201 	bic.w	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f023 0202 	bic.w	r2, r3, #2
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f023 0201 	bic.w	r2, r3, #1
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <OC1Config+0xd0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <OC1Config+0x6a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <OC1Config+0xd4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d11e      	bne.n	80030d8 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f023 0208 	bic.w	r2, r3, #8
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 0204 	bic.w	r2, r3, #4
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fe7c 	bl	8002de8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40010000 	.word	0x40010000
 8003104:	40010400 	.word	0x40010400

08003108 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f023 0210 	bic.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0220 	bic.w	r2, r3, #32
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0210 	bic.w	r2, r3, #16
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <OC2Config+0xd8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <OC2Config+0x70>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <OC2Config+0xdc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d11f      	bne.n	80031b8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	019b      	lsls	r3, r3, #6
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	019b      	lsls	r3, r3, #6
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fe1a 	bl	8002e04 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40010000 	.word	0x40010000
 80031e4:	40010400 	.word	0x40010400

080031e8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <OC3Config+0xd8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <OC3Config+0x6e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <OC3Config+0xdc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d11f      	bne.n	8003296 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	029b      	lsls	r3, r3, #10
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	029b      	lsls	r3, r3, #10
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	015b      	lsls	r3, r3, #5
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fdb9 	bl	8002e20 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40010000 	.word	0x40010000
 80032c4:	40010400 	.word	0x40010400

080032c8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	031b      	lsls	r3, r3, #12
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	031b      	lsls	r3, r3, #12
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <OC4Config+0xa8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <OC4Config+0x70>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a10      	ldr	r2, [pc, #64]	; (8003374 <OC4Config+0xac>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d107      	bne.n	8003348 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	019b      	lsls	r3, r3, #6
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff fd6e 	bl	8002e3c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40010000 	.word	0x40010000
 8003374:	40010400 	.word	0x40010400

08003378 <LL_USART_IsEnabled>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_USART_SetStopBitsLength>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_USART_SetHWFlowCtrl>:
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	615a      	str	r2, [r3, #20]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_USART_SetBaudRate>:
{
 80033ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f0:	b0c0      	sub	sp, #256	; 0x100
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033f8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80033fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003400:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340c:	f040 810c 	bne.w	8003628 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003410:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003414:	2200      	movs	r2, #0
 8003416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800341a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800341e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003422:	4622      	mov	r2, r4
 8003424:	462b      	mov	r3, r5
 8003426:	1891      	adds	r1, r2, r2
 8003428:	6639      	str	r1, [r7, #96]	; 0x60
 800342a:	415b      	adcs	r3, r3
 800342c:	667b      	str	r3, [r7, #100]	; 0x64
 800342e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003432:	4621      	mov	r1, r4
 8003434:	eb12 0801 	adds.w	r8, r2, r1
 8003438:	4629      	mov	r1, r5
 800343a:	eb43 0901 	adc.w	r9, r3, r1
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800344a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800344e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003452:	4690      	mov	r8, r2
 8003454:	4699      	mov	r9, r3
 8003456:	4623      	mov	r3, r4
 8003458:	eb18 0303 	adds.w	r3, r8, r3
 800345c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003460:	462b      	mov	r3, r5
 8003462:	eb49 0303 	adc.w	r3, r9, r3
 8003466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800346a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800346e:	2200      	movs	r2, #0
 8003470:	469a      	mov	sl, r3
 8003472:	4693      	mov	fp, r2
 8003474:	eb1a 030a 	adds.w	r3, sl, sl
 8003478:	65bb      	str	r3, [r7, #88]	; 0x58
 800347a:	eb4b 030b 	adc.w	r3, fp, fp
 800347e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003480:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003488:	f7fd fa94 	bl	80009b4 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <LL_USART_SetBaudRate+0x238>)
 8003492:	fba3 2302 	umull	r2, r3, r3, r2
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	b29b      	uxth	r3, r3
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	b29c      	uxth	r4, r3
 800349e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034a8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034ac:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	1891      	adds	r1, r2, r2
 80034b6:	6539      	str	r1, [r7, #80]	; 0x50
 80034b8:	415b      	adcs	r3, r3
 80034ba:	657b      	str	r3, [r7, #84]	; 0x54
 80034bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034c0:	4641      	mov	r1, r8
 80034c2:	1851      	adds	r1, r2, r1
 80034c4:	64b9      	str	r1, [r7, #72]	; 0x48
 80034c6:	4649      	mov	r1, r9
 80034c8:	414b      	adcs	r3, r1
 80034ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80034d8:	4659      	mov	r1, fp
 80034da:	00cb      	lsls	r3, r1, #3
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e2:	4651      	mov	r1, sl
 80034e4:	00ca      	lsls	r2, r1, #3
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	4642      	mov	r2, r8
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034f4:	464b      	mov	r3, r9
 80034f6:	460a      	mov	r2, r1
 80034f8:	eb42 0303 	adc.w	r3, r2, r3
 80034fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003500:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800350a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800350e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003512:	460b      	mov	r3, r1
 8003514:	18db      	adds	r3, r3, r3
 8003516:	643b      	str	r3, [r7, #64]	; 0x40
 8003518:	4613      	mov	r3, r2
 800351a:	eb42 0303 	adc.w	r3, r2, r3
 800351e:	647b      	str	r3, [r7, #68]	; 0x44
 8003520:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003524:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003528:	f7fd fa44 	bl	80009b4 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4611      	mov	r1, r2
 8003532:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <LL_USART_SetBaudRate+0x238>)
 8003534:	fba3 2301 	umull	r2, r3, r3, r1
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2264      	movs	r2, #100	; 0x64
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	1acb      	subs	r3, r1, r3
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003548:	4b36      	ldr	r3, [pc, #216]	; (8003624 <LL_USART_SetBaudRate+0x238>)
 800354a:	fba3 2302 	umull	r2, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	b29b      	uxth	r3, r3
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800355a:	b29b      	uxth	r3, r3
 800355c:	4423      	add	r3, r4
 800355e:	b29c      	uxth	r4, r3
 8003560:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003564:	2200      	movs	r2, #0
 8003566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800356a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800356e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003572:	4642      	mov	r2, r8
 8003574:	464b      	mov	r3, r9
 8003576:	1891      	adds	r1, r2, r2
 8003578:	63b9      	str	r1, [r7, #56]	; 0x38
 800357a:	415b      	adcs	r3, r3
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003582:	4641      	mov	r1, r8
 8003584:	1851      	adds	r1, r2, r1
 8003586:	6339      	str	r1, [r7, #48]	; 0x30
 8003588:	4649      	mov	r1, r9
 800358a:	414b      	adcs	r3, r1
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800359a:	4659      	mov	r1, fp
 800359c:	00cb      	lsls	r3, r1, #3
 800359e:	4651      	mov	r1, sl
 80035a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a4:	4651      	mov	r1, sl
 80035a6:	00ca      	lsls	r2, r1, #3
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	4603      	mov	r3, r0
 80035ae:	4642      	mov	r2, r8
 80035b0:	189b      	adds	r3, r3, r2
 80035b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b6:	464b      	mov	r3, r9
 80035b8:	460a      	mov	r2, r1
 80035ba:	eb42 0303 	adc.w	r3, r2, r3
 80035be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80035c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035cc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80035d0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80035d4:	460b      	mov	r3, r1
 80035d6:	18db      	adds	r3, r3, r3
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035da:	4613      	mov	r3, r2
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035e6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80035ea:	f7fd f9e3 	bl	80009b4 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <LL_USART_SetBaudRate+0x238>)
 80035f4:	fba3 1302 	umull	r1, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	2164      	movs	r1, #100	; 0x64
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	3332      	adds	r3, #50	; 0x32
 8003606:	4a07      	ldr	r2, [pc, #28]	; (8003624 <LL_USART_SetBaudRate+0x238>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b29b      	uxth	r3, r3
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	b29b      	uxth	r3, r3
 8003616:	4423      	add	r3, r4
 8003618:	b29b      	uxth	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003620:	609a      	str	r2, [r3, #8]
}
 8003622:	e107      	b.n	8003834 <LL_USART_SetBaudRate+0x448>
 8003624:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003628:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800362c:	2200      	movs	r2, #0
 800362e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003632:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003636:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800363a:	4642      	mov	r2, r8
 800363c:	464b      	mov	r3, r9
 800363e:	1891      	adds	r1, r2, r2
 8003640:	6239      	str	r1, [r7, #32]
 8003642:	415b      	adcs	r3, r3
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800364a:	4641      	mov	r1, r8
 800364c:	1854      	adds	r4, r2, r1
 800364e:	4649      	mov	r1, r9
 8003650:	eb43 0501 	adc.w	r5, r3, r1
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	00eb      	lsls	r3, r5, #3
 800365e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003662:	00e2      	lsls	r2, r4, #3
 8003664:	4614      	mov	r4, r2
 8003666:	461d      	mov	r5, r3
 8003668:	4643      	mov	r3, r8
 800366a:	18e3      	adds	r3, r4, r3
 800366c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003670:	464b      	mov	r3, r9
 8003672:	eb45 0303 	adc.w	r3, r5, r3
 8003676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800367a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003684:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003694:	4629      	mov	r1, r5
 8003696:	008b      	lsls	r3, r1, #2
 8003698:	4621      	mov	r1, r4
 800369a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800369e:	4621      	mov	r1, r4
 80036a0:	008a      	lsls	r2, r1, #2
 80036a2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80036a6:	f7fd f985 	bl	80009b4 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4b64      	ldr	r3, [pc, #400]	; (8003840 <LL_USART_SetBaudRate+0x454>)
 80036b0:	fba3 2302 	umull	r2, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	b29c      	uxth	r4, r3
 80036bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ca:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80036ce:	4642      	mov	r2, r8
 80036d0:	464b      	mov	r3, r9
 80036d2:	1891      	adds	r1, r2, r2
 80036d4:	61b9      	str	r1, [r7, #24]
 80036d6:	415b      	adcs	r3, r3
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036de:	4641      	mov	r1, r8
 80036e0:	1851      	adds	r1, r2, r1
 80036e2:	6139      	str	r1, [r7, #16]
 80036e4:	4649      	mov	r1, r9
 80036e6:	414b      	adcs	r3, r1
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f6:	4659      	mov	r1, fp
 80036f8:	00cb      	lsls	r3, r1, #3
 80036fa:	4651      	mov	r1, sl
 80036fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003700:	4651      	mov	r1, sl
 8003702:	00ca      	lsls	r2, r1, #3
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	4603      	mov	r3, r0
 800370a:	4642      	mov	r2, r8
 800370c:	189b      	adds	r3, r3, r2
 800370e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003712:	464b      	mov	r3, r9
 8003714:	460a      	mov	r2, r1
 8003716:	eb42 0303 	adc.w	r3, r2, r3
 800371a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800371e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003722:	2200      	movs	r2, #0
 8003724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003728:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003738:	4649      	mov	r1, r9
 800373a:	008b      	lsls	r3, r1, #2
 800373c:	4641      	mov	r1, r8
 800373e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003742:	4641      	mov	r1, r8
 8003744:	008a      	lsls	r2, r1, #2
 8003746:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800374a:	f7fd f933 	bl	80009b4 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <LL_USART_SetBaudRate+0x454>)
 8003754:	fba3 1302 	umull	r1, r3, r3, r2
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	2164      	movs	r1, #100	; 0x64
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	3332      	adds	r3, #50	; 0x32
 8003766:	4a36      	ldr	r2, [pc, #216]	; (8003840 <LL_USART_SetBaudRate+0x454>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	b29b      	uxth	r3, r3
 8003770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003774:	b29b      	uxth	r3, r3
 8003776:	4423      	add	r3, r4
 8003778:	b29c      	uxth	r4, r3
 800377a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800377e:	2200      	movs	r2, #0
 8003780:	67bb      	str	r3, [r7, #120]	; 0x78
 8003782:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003784:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	1891      	adds	r1, r2, r2
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	415b      	adcs	r3, r3
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003798:	4641      	mov	r1, r8
 800379a:	1851      	adds	r1, r2, r1
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	4649      	mov	r1, r9
 80037a0:	414b      	adcs	r3, r1
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037b0:	4659      	mov	r1, fp
 80037b2:	00cb      	lsls	r3, r1, #3
 80037b4:	4651      	mov	r1, sl
 80037b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ba:	4651      	mov	r1, sl
 80037bc:	00ca      	lsls	r2, r1, #3
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	4642      	mov	r2, r8
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	673b      	str	r3, [r7, #112]	; 0x70
 80037ca:	464b      	mov	r3, r9
 80037cc:	460a      	mov	r2, r1
 80037ce:	eb42 0303 	adc.w	r3, r2, r3
 80037d2:	677b      	str	r3, [r7, #116]	; 0x74
 80037d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80037d8:	2200      	movs	r2, #0
 80037da:	66bb      	str	r3, [r7, #104]	; 0x68
 80037dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80037ea:	4649      	mov	r1, r9
 80037ec:	008b      	lsls	r3, r1, #2
 80037ee:	4641      	mov	r1, r8
 80037f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f4:	4641      	mov	r1, r8
 80037f6:	008a      	lsls	r2, r1, #2
 80037f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80037fc:	f7fd f8da 	bl	80009b4 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <LL_USART_SetBaudRate+0x454>)
 8003806:	fba3 1302 	umull	r1, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2164      	movs	r1, #100	; 0x64
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a09      	ldr	r2, [pc, #36]	; (8003840 <LL_USART_SetBaudRate+0x454>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	b29b      	uxth	r3, r3
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	b29b      	uxth	r3, r3
 8003828:	4423      	add	r3, r4
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800383a:	46bd      	mov	sp, r7
 800383c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003840:	51eb851f 	.word	0x51eb851f

08003844 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff fd8e 	bl	8003378 <LL_USART_IsEnabled>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d15e      	bne.n	8003920 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800386a:	f023 030c 	bic.w	r3, r3, #12
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	6851      	ldr	r1, [r2, #4]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	68d2      	ldr	r2, [r2, #12]
 8003876:	4311      	orrs	r1, r2
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	6912      	ldr	r2, [r2, #16]
 800387c:	4311      	orrs	r1, r2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	6992      	ldr	r2, [r2, #24]
 8003882:	430a      	orrs	r2, r1
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4619      	mov	r1, r3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff fd85 	bl	80033a0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fd92 	bl	80033c6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80038a2:	f107 0308 	add.w	r3, r7, #8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff f9aa 	bl	8002c00 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <LL_USART_Init+0xe8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d102      	bne.n	80038ba <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	e021      	b.n	80038fe <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <LL_USART_Init+0xec>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d102      	bne.n	80038c8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e01a      	b.n	80038fe <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <LL_USART_Init+0xf0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d102      	bne.n	80038d6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	e013      	b.n	80038fe <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <LL_USART_Init+0xf4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d102      	bne.n	80038e4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e00c      	b.n	80038fe <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a15      	ldr	r2, [pc, #84]	; (800393c <LL_USART_Init+0xf8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d102      	bne.n	80038f2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	e005      	b.n	80038fe <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a12      	ldr	r2, [pc, #72]	; (8003940 <LL_USART_Init+0xfc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800390c:	2300      	movs	r3, #0
 800390e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69b9      	ldr	r1, [r7, #24]
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fd66 	bl	80033ec <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003920:	7ffb      	ldrb	r3, [r7, #31]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40011000 	.word	0x40011000
 8003930:	40004400 	.word	0x40004400
 8003934:	40004800 	.word	0x40004800
 8003938:	40011400 	.word	0x40011400
 800393c:	40004c00 	.word	0x40004c00
 8003940:	40005000 	.word	0x40005000

08003944 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <LL_InitTick+0x30>)
 8003958:	3b01      	subs	r3, #1
 800395a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <LL_InitTick+0x30>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003962:	4b04      	ldr	r3, [pc, #16]	; (8003974 <LL_InitTick+0x30>)
 8003964:	2205      	movs	r2, #5
 8003966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000e010 	.word	0xe000e010

08003978 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003980:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ffdd 	bl	8003944 <LL_InitTick>
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <LL_mDelay+0x48>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80039a2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039aa:	d00c      	beq.n	80039c6 <LL_mDelay+0x32>
  {
    Delay++;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3301      	adds	r3, #1
 80039b0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80039b2:	e008      	b.n	80039c6 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <LL_mDelay+0x48>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <LL_mDelay+0x32>
    {
      Delay--;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f3      	bne.n	80039b4 <LL_mDelay+0x20>
    }
  }
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	e000e010 	.word	0xe000e010

080039e0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80039e8:	4a04      	ldr	r2, [pc, #16]	; (80039fc <LL_SetSystemCoreClock+0x1c>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6013      	str	r3, [r2, #0]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000

08003a00 <__libc_init_array>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	4d0d      	ldr	r5, [pc, #52]	; (8003a38 <__libc_init_array+0x38>)
 8003a04:	4c0d      	ldr	r4, [pc, #52]	; (8003a3c <__libc_init_array+0x3c>)
 8003a06:	1b64      	subs	r4, r4, r5
 8003a08:	10a4      	asrs	r4, r4, #2
 8003a0a:	2600      	movs	r6, #0
 8003a0c:	42a6      	cmp	r6, r4
 8003a0e:	d109      	bne.n	8003a24 <__libc_init_array+0x24>
 8003a10:	4d0b      	ldr	r5, [pc, #44]	; (8003a40 <__libc_init_array+0x40>)
 8003a12:	4c0c      	ldr	r4, [pc, #48]	; (8003a44 <__libc_init_array+0x44>)
 8003a14:	f000 f8ae 	bl	8003b74 <_init>
 8003a18:	1b64      	subs	r4, r4, r5
 8003a1a:	10a4      	asrs	r4, r4, #2
 8003a1c:	2600      	movs	r6, #0
 8003a1e:	42a6      	cmp	r6, r4
 8003a20:	d105      	bne.n	8003a2e <__libc_init_array+0x2e>
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a28:	4798      	blx	r3
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	e7ee      	b.n	8003a0c <__libc_init_array+0xc>
 8003a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a32:	4798      	blx	r3
 8003a34:	3601      	adds	r6, #1
 8003a36:	e7f2      	b.n	8003a1e <__libc_init_array+0x1e>
 8003a38:	08003be0 	.word	0x08003be0
 8003a3c:	08003be0 	.word	0x08003be0
 8003a40:	08003be0 	.word	0x08003be0
 8003a44:	08003be4 	.word	0x08003be4

08003a48 <memset>:
 8003a48:	4402      	add	r2, r0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d100      	bne.n	8003a52 <memset+0xa>
 8003a50:	4770      	bx	lr
 8003a52:	f803 1b01 	strb.w	r1, [r3], #1
 8003a56:	e7f9      	b.n	8003a4c <memset+0x4>

08003a58 <rint>:
 8003a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5a:	ec51 0b10 	vmov	r0, r1, d0
 8003a5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003a62:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 8003a66:	2d13      	cmp	r5, #19
 8003a68:	ee10 3a10 	vmov	r3, s0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8003a72:	dc5b      	bgt.n	8003b2c <rint+0xd4>
 8003a74:	2d00      	cmp	r5, #0
 8003a76:	da2d      	bge.n	8003ad4 <rint+0x7c>
 8003a78:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003a7c:	4302      	orrs	r2, r0
 8003a7e:	d025      	beq.n	8003acc <rint+0x74>
 8003a80:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8003a84:	4302      	orrs	r2, r0
 8003a86:	4253      	negs	r3, r2
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	0b1b      	lsrs	r3, r3, #12
 8003a8c:	0c4a      	lsrs	r2, r1, #17
 8003a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a92:	0452      	lsls	r2, r2, #17
 8003a94:	ea43 0102 	orr.w	r1, r3, r2
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4934      	ldr	r1, [pc, #208]	; (8003b6c <rint+0x114>)
 8003a9c:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8003aa0:	e9d6 6700 	ldrd	r6, r7, [r6]
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f7fc fb93 	bl	80001d4 <__adddf3>
 8003aae:	e9cd 0100 	strd	r0, r1, [sp]
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ab8:	4632      	mov	r2, r6
 8003aba:	f7fc fb89 	bl	80001d0 <__aeabi_dsub>
 8003abe:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8003ac2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003ac6:	ea43 0704 	orr.w	r7, r3, r4
 8003aca:	4639      	mov	r1, r7
 8003acc:	ec41 0b10 	vmov	d0, r0, r1
 8003ad0:	b003      	add	sp, #12
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	4a26      	ldr	r2, [pc, #152]	; (8003b70 <rint+0x118>)
 8003ad6:	412a      	asrs	r2, r5
 8003ad8:	ea01 0702 	and.w	r7, r1, r2
 8003adc:	4307      	orrs	r7, r0
 8003ade:	d0f5      	beq.n	8003acc <rint+0x74>
 8003ae0:	0851      	lsrs	r1, r2, #1
 8003ae2:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	d00c      	beq.n	8003b04 <rint+0xac>
 8003aea:	ea24 0201 	bic.w	r2, r4, r1
 8003aee:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003af2:	2d13      	cmp	r5, #19
 8003af4:	fa44 f505 	asr.w	r5, r4, r5
 8003af8:	bf0c      	ite	eq
 8003afa:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 8003afe:	2300      	movne	r3, #0
 8003b00:	ea42 0405 	orr.w	r4, r2, r5
 8003b04:	4919      	ldr	r1, [pc, #100]	; (8003b6c <rint+0x114>)
 8003b06:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4623      	mov	r3, r4
 8003b0e:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003b12:	4620      	mov	r0, r4
 8003b14:	4629      	mov	r1, r5
 8003b16:	f7fc fb5d 	bl	80001d4 <__adddf3>
 8003b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8003b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	f7fc fb53 	bl	80001d0 <__aeabi_dsub>
 8003b2a:	e7cf      	b.n	8003acc <rint+0x74>
 8003b2c:	2d33      	cmp	r5, #51	; 0x33
 8003b2e:	dd08      	ble.n	8003b42 <rint+0xea>
 8003b30:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003b34:	d1ca      	bne.n	8003acc <rint+0x74>
 8003b36:	ee10 2a10 	vmov	r2, s0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	f7fc fb4a 	bl	80001d4 <__adddf3>
 8003b40:	e7c4      	b.n	8003acc <rint+0x74>
 8003b42:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8003b46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003b4a:	40d5      	lsrs	r5, r2
 8003b4c:	4228      	tst	r0, r5
 8003b4e:	d0bd      	beq.n	8003acc <rint+0x74>
 8003b50:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 8003b54:	ea4f 0155 	mov.w	r1, r5, lsr #1
 8003b58:	bf1f      	itttt	ne
 8003b5a:	ea23 0101 	bicne.w	r1, r3, r1
 8003b5e:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 8003b62:	fa43 f202 	asrne.w	r2, r3, r2
 8003b66:	ea41 0302 	orrne.w	r3, r1, r2
 8003b6a:	e7cb      	b.n	8003b04 <rint+0xac>
 8003b6c:	08003bc8 	.word	0x08003bc8
 8003b70:	000fffff 	.word	0x000fffff

08003b74 <_init>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr

08003b80 <_fini>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr
